// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: package.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Track: SwiftProtobuf.Message {
  static let protoMessageName: String = "Track"

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var acc: UInt32 {
    get {return _acc ?? 0}
    set {_acc = newValue}
  }
  /// Returns true if `acc` has been explicitly set.
  var hasAcc: Bool {return self._acc != nil}
  /// Clears the value of `acc`. Subsequent reads from it will return its default value.
  mutating func clearAcc() {self._acc = nil}

  var nameApp: String {
    get {return _nameApp ?? String()}
    set {_nameApp = newValue}
  }
  /// Returns true if `nameApp` has been explicitly set.
  var hasNameApp: Bool {return self._nameApp != nil}
  /// Clears the value of `nameApp`. Subsequent reads from it will return its default value.
  mutating func clearNameApp() {self._nameApp = nil}

  var deviceIp: String {
    get {return _deviceIp ?? String()}
    set {_deviceIp = newValue}
  }
  /// Returns true if `deviceIp` has been explicitly set.
  var hasDeviceIp: Bool {return self._deviceIp != nil}
  /// Clears the value of `deviceIp`. Subsequent reads from it will return its default value.
  mutating func clearDeviceIp() {self._deviceIp = nil}

  var pageViews: [PageView] = []

  var typeConnection: String {
    get {return _typeConnection ?? String()}
    set {_typeConnection = newValue}
  }
  /// Returns true if `typeConnection` has been explicitly set.
  var hasTypeConnection: Bool {return self._typeConnection != nil}
  /// Clears the value of `typeConnection`. Subsequent reads from it will return its default value.
  mutating func clearTypeConnection() {self._typeConnection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._userID == nil {return false}
    if self._acc == nil {return false}
    if self._nameApp == nil {return false}
    if self._deviceIp == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.pageViews) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._userID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._acc)
      case 3: try decoder.decodeSingularStringField(value: &self._nameApp)
      case 4: try decoder.decodeSingularStringField(value: &self._deviceIp)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.pageViews)
      case 6: try decoder.decodeSingularStringField(value: &self._typeConnection)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._acc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._nameApp {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._deviceIp {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.pageViews.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageViews, fieldNumber: 5)
    }
    if let v = self._typeConnection {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _userID: String? = nil
  fileprivate var _acc: UInt32? = nil
  fileprivate var _nameApp: String? = nil
  fileprivate var _deviceIp: String? = nil
  fileprivate var _typeConnection: String? = nil
}

struct PageView: SwiftProtobuf.Message {
  static let protoMessageName: String = "PageView"

  var activity: String {
    get {return _activity ?? String()}
    set {_activity = newValue}
  }
  /// Returns true if `activity` has been explicitly set.
  var hasActivity: Bool {return self._activity != nil}
  /// Clears the value of `activity`. Subsequent reads from it will return its default value.
  mutating func clearActivity() {self._activity = nil}

  var dateTime: UInt64 {
    get {return _dateTime ?? 0}
    set {_dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  var hasDateTime: Bool {return self._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  mutating func clearDateTime() {self._dateTime = nil}

  var titlePage: String {
    get {return _titlePage ?? String()}
    set {_titlePage = newValue}
  }
  /// Returns true if `titlePage` has been explicitly set.
  var hasTitlePage: Bool {return self._titlePage != nil}
  /// Clears the value of `titlePage`. Subsequent reads from it will return its default value.
  mutating func clearTitlePage() {self._titlePage = nil}

  var callPage: String {
    get {return _callPage ?? String()}
    set {_callPage = newValue}
  }
  /// Returns true if `callPage` has been explicitly set.
  var hasCallPage: Bool {return self._callPage != nil}
  /// Clears the value of `callPage`. Subsequent reads from it will return its default value.
  mutating func clearCallPage() {self._callPage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._activity == nil {return false}
    if self._dateTime == nil {return false}
    if self._titlePage == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._activity)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._dateTime)
      case 3: try decoder.decodeSingularStringField(value: &self._titlePage)
      case 4: try decoder.decodeSingularStringField(value: &self._callPage)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._activity {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._dateTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._titlePage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._callPage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _activity: String? = nil
  fileprivate var _dateTime: UInt64? = nil
  fileprivate var _titlePage: String? = nil
  fileprivate var _callPage: String? = nil
}

struct MobileInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = "MobileInfo"

  var deviceID: String {
    get {return _storage._deviceID ?? String()}
    set {_uniqueStorage()._deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return _storage._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {_storage._deviceID = nil}

  var platform: String {
    get {return _storage._platform ?? String()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_storage._platform = nil}

  var longitude: String {
    get {return _storage._longitude ?? String()}
    set {_uniqueStorage()._longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
  var hasLongitude: Bool {return _storage._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  mutating func clearLongitude() {_storage._longitude = nil}

  var latitude: String {
    get {return _storage._latitude ?? String()}
    set {_uniqueStorage()._latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  var hasLatitude: Bool {return _storage._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  mutating func clearLatitude() {_storage._latitude = nil}

  var androidName: String {
    get {return _storage._androidName ?? String()}
    set {_uniqueStorage()._androidName = newValue}
  }
  /// Returns true if `androidName` has been explicitly set.
  var hasAndroidName: Bool {return _storage._androidName != nil}
  /// Clears the value of `androidName`. Subsequent reads from it will return its default value.
  mutating func clearAndroidName() {_storage._androidName = nil}

  var androidBrand: String {
    get {return _storage._androidBrand ?? String()}
    set {_uniqueStorage()._androidBrand = newValue}
  }
  /// Returns true if `androidBrand` has been explicitly set.
  var hasAndroidBrand: Bool {return _storage._androidBrand != nil}
  /// Clears the value of `androidBrand`. Subsequent reads from it will return its default value.
  mutating func clearAndroidBrand() {_storage._androidBrand = nil}

  var androidModel: String {
    get {return _storage._androidModel ?? String()}
    set {_uniqueStorage()._androidModel = newValue}
  }
  /// Returns true if `androidModel` has been explicitly set.
  var hasAndroidModel: Bool {return _storage._androidModel != nil}
  /// Clears the value of `androidModel`. Subsequent reads from it will return its default value.
  mutating func clearAndroidModel() {_storage._androidModel = nil}

  var versionRelease: String {
    get {return _storage._versionRelease ?? String()}
    set {_uniqueStorage()._versionRelease = newValue}
  }
  /// Returns true if `versionRelease` has been explicitly set.
  var hasVersionRelease: Bool {return _storage._versionRelease != nil}
  /// Clears the value of `versionRelease`. Subsequent reads from it will return its default value.
  mutating func clearVersionRelease() {_storage._versionRelease = nil}

  var manufacturer: String {
    get {return _storage._manufacturer ?? String()}
    set {_uniqueStorage()._manufacturer = newValue}
  }
  /// Returns true if `manufacturer` has been explicitly set.
  var hasManufacturer: Bool {return _storage._manufacturer != nil}
  /// Clears the value of `manufacturer`. Subsequent reads from it will return its default value.
  mutating func clearManufacturer() {_storage._manufacturer = nil}

  var versionLib: String {
    get {return _storage._versionLib ?? String()}
    set {_uniqueStorage()._versionLib = newValue}
  }
  /// Returns true if `versionLib` has been explicitly set.
  var hasVersionLib: Bool {return _storage._versionLib != nil}
  /// Clears the value of `versionLib`. Subsequent reads from it will return its default value.
  mutating func clearVersionLib() {_storage._versionLib = nil}

  var versionCode: Int32 {
    get {return _storage._versionCode ?? 0}
    set {_uniqueStorage()._versionCode = newValue}
  }
  /// Returns true if `versionCode` has been explicitly set.
  var hasVersionCode: Bool {return _storage._versionCode != nil}
  /// Clears the value of `versionCode`. Subsequent reads from it will return its default value.
  mutating func clearVersionCode() {_storage._versionCode = nil}

  var versionOs: Int32 {
    get {return _storage._versionOs ?? 0}
    set {_uniqueStorage()._versionOs = newValue}
  }
  /// Returns true if `versionOs` has been explicitly set.
  var hasVersionOs: Bool {return _storage._versionOs != nil}
  /// Clears the value of `versionOs`. Subsequent reads from it will return its default value.
  mutating func clearVersionOs() {_storage._versionOs = nil}

  var androidFingerPrint: String {
    get {return _storage._androidFingerPrint ?? String()}
    set {_uniqueStorage()._androidFingerPrint = newValue}
  }
  /// Returns true if `androidFingerPrint` has been explicitly set.
  var hasAndroidFingerPrint: Bool {return _storage._androidFingerPrint != nil}
  /// Clears the value of `androidFingerPrint`. Subsequent reads from it will return its default value.
  mutating func clearAndroidFingerPrint() {_storage._androidFingerPrint = nil}

  var userAgent: String {
    get {return _storage._userAgent ?? String()}
    set {_uniqueStorage()._userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  var hasUserAgent: Bool {return _storage._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  mutating func clearUserAgent() {_storage._userAgent = nil}

  var linkPlayStore: String {
    get {return _storage._linkPlayStore ?? String()}
    set {_uniqueStorage()._linkPlayStore = newValue}
  }
  /// Returns true if `linkPlayStore` has been explicitly set.
  var hasLinkPlayStore: Bool {return _storage._linkPlayStore != nil}
  /// Clears the value of `linkPlayStore`. Subsequent reads from it will return its default value.
  mutating func clearLinkPlayStore() {_storage._linkPlayStore = nil}

  var typeCategory: String {
    get {return _storage._typeCategory ?? String()}
    set {_uniqueStorage()._typeCategory = newValue}
  }
  /// Returns true if `typeCategory` has been explicitly set.
  var hasTypeCategory: Bool {return _storage._typeCategory != nil}
  /// Clears the value of `typeCategory`. Subsequent reads from it will return its default value.
  mutating func clearTypeCategory() {_storage._typeCategory = nil}

  var imei: String {
    get {return _storage._imei ?? String()}
    set {_uniqueStorage()._imei = newValue}
  }
  /// Returns true if `imei` has been explicitly set.
  var hasImei: Bool {return _storage._imei != nil}
  /// Clears the value of `imei`. Subsequent reads from it will return its default value.
  mutating func clearImei() {_storage._imei = nil}

  var softwareVersion: String {
    get {return _storage._softwareVersion ?? String()}
    set {_uniqueStorage()._softwareVersion = newValue}
  }
  /// Returns true if `softwareVersion` has been explicitly set.
  var hasSoftwareVersion: Bool {return _storage._softwareVersion != nil}
  /// Clears the value of `softwareVersion`. Subsequent reads from it will return its default value.
  mutating func clearSoftwareVersion() {_storage._softwareVersion = nil}

  var languageApp: String {
    get {return _storage._languageApp ?? String()}
    set {_uniqueStorage()._languageApp = newValue}
  }
  /// Returns true if `languageApp` has been explicitly set.
  var hasLanguageApp: Bool {return _storage._languageApp != nil}
  /// Clears the value of `languageApp`. Subsequent reads from it will return its default value.
  mutating func clearLanguageApp() {_storage._languageApp = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_storage._userID = nil}

  var acc: UInt32 {
    get {return _storage._acc ?? 0}
    set {_uniqueStorage()._acc = newValue}
  }
  /// Returns true if `acc` has been explicitly set.
  var hasAcc: Bool {return _storage._acc != nil}
  /// Clears the value of `acc`. Subsequent reads from it will return its default value.
  mutating func clearAcc() {_storage._acc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._userID == nil {return false}
      if _storage._acc == nil {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._deviceID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._platform)
        case 3: try decoder.decodeSingularStringField(value: &_storage._longitude)
        case 4: try decoder.decodeSingularStringField(value: &_storage._latitude)
        case 5: try decoder.decodeSingularStringField(value: &_storage._androidName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._androidBrand)
        case 7: try decoder.decodeSingularStringField(value: &_storage._androidModel)
        case 8: try decoder.decodeSingularStringField(value: &_storage._versionRelease)
        case 9: try decoder.decodeSingularStringField(value: &_storage._manufacturer)
        case 10: try decoder.decodeSingularStringField(value: &_storage._versionLib)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._versionCode)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._versionOs)
        case 13: try decoder.decodeSingularStringField(value: &_storage._androidFingerPrint)
        case 14: try decoder.decodeSingularStringField(value: &_storage._userAgent)
        case 15: try decoder.decodeSingularStringField(value: &_storage._linkPlayStore)
        case 16: try decoder.decodeSingularStringField(value: &_storage._typeCategory)
        case 17: try decoder.decodeSingularStringField(value: &_storage._imei)
        case 18: try decoder.decodeSingularStringField(value: &_storage._softwareVersion)
        case 19: try decoder.decodeSingularStringField(value: &_storage._languageApp)
        case 20: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 21: try decoder.decodeSingularUInt32Field(value: &_storage._acc)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._deviceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._platform {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._longitude {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._latitude {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._androidName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._androidBrand {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._androidModel {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._versionRelease {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._manufacturer {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._versionLib {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._versionCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._versionOs {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._androidFingerPrint {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      }
      if let v = _storage._userAgent {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._linkPlayStore {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
      if let v = _storage._typeCategory {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      }
      if let v = _storage._imei {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      }
      if let v = _storage._softwareVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if let v = _storage._languageApp {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      }
      if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      }
      if let v = _storage._acc {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Track: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "acc"),
    3: .same(proto: "nameApp"),
    4: .same(proto: "deviceIP"),
    5: .same(proto: "pageViews"),
    6: .same(proto: "typeConnection"),
  ]

  func _protobuf_generated_isEqualTo(other: Track) -> Bool {
    if self._userID != other._userID {return false}
    if self._acc != other._acc {return false}
    if self._nameApp != other._nameApp {return false}
    if self._deviceIp != other._deviceIp {return false}
    if self.pageViews != other.pageViews {return false}
    if self._typeConnection != other._typeConnection {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PageView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "activity"),
    2: .same(proto: "dateTime"),
    3: .same(proto: "titlePage"),
    4: .same(proto: "callPage"),
  ]

  func _protobuf_generated_isEqualTo(other: PageView) -> Bool {
    if self._activity != other._activity {return false}
    if self._dateTime != other._dateTime {return false}
    if self._titlePage != other._titlePage {return false}
    if self._callPage != other._callPage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MobileInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deviceId"),
    2: .same(proto: "platform"),
    3: .same(proto: "longitude"),
    4: .same(proto: "latitude"),
    5: .same(proto: "androidName"),
    6: .same(proto: "androidBrand"),
    7: .same(proto: "androidModel"),
    8: .same(proto: "versionRelease"),
    9: .same(proto: "manufacturer"),
    10: .same(proto: "versionLib"),
    11: .same(proto: "versionCode"),
    12: .same(proto: "versionOS"),
    13: .same(proto: "androidFingerPrint"),
    14: .same(proto: "userAgent"),
    15: .same(proto: "linkPlayStore"),
    16: .same(proto: "typeCategory"),
    17: .same(proto: "imei"),
    18: .same(proto: "softwareVersion"),
    19: .same(proto: "languageApp"),
    20: .same(proto: "userId"),
    21: .same(proto: "acc"),
  ]

  fileprivate class _StorageClass {
    var _deviceID: String? = nil
    var _platform: String? = nil
    var _longitude: String? = nil
    var _latitude: String? = nil
    var _androidName: String? = nil
    var _androidBrand: String? = nil
    var _androidModel: String? = nil
    var _versionRelease: String? = nil
    var _manufacturer: String? = nil
    var _versionLib: String? = nil
    var _versionCode: Int32? = nil
    var _versionOs: Int32? = nil
    var _androidFingerPrint: String? = nil
    var _userAgent: String? = nil
    var _linkPlayStore: String? = nil
    var _typeCategory: String? = nil
    var _imei: String? = nil
    var _softwareVersion: String? = nil
    var _languageApp: String? = nil
    var _userID: String? = nil
    var _acc: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _deviceID = source._deviceID
      _platform = source._platform
      _longitude = source._longitude
      _latitude = source._latitude
      _androidName = source._androidName
      _androidBrand = source._androidBrand
      _androidModel = source._androidModel
      _versionRelease = source._versionRelease
      _manufacturer = source._manufacturer
      _versionLib = source._versionLib
      _versionCode = source._versionCode
      _versionOs = source._versionOs
      _androidFingerPrint = source._androidFingerPrint
      _userAgent = source._userAgent
      _linkPlayStore = source._linkPlayStore
      _typeCategory = source._typeCategory
      _imei = source._imei
      _softwareVersion = source._softwareVersion
      _languageApp = source._languageApp
      _userID = source._userID
      _acc = source._acc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: MobileInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._deviceID != other_storage._deviceID {return false}
        if _storage._platform != other_storage._platform {return false}
        if _storage._longitude != other_storage._longitude {return false}
        if _storage._latitude != other_storage._latitude {return false}
        if _storage._androidName != other_storage._androidName {return false}
        if _storage._androidBrand != other_storage._androidBrand {return false}
        if _storage._androidModel != other_storage._androidModel {return false}
        if _storage._versionRelease != other_storage._versionRelease {return false}
        if _storage._manufacturer != other_storage._manufacturer {return false}
        if _storage._versionLib != other_storage._versionLib {return false}
        if _storage._versionCode != other_storage._versionCode {return false}
        if _storage._versionOs != other_storage._versionOs {return false}
        if _storage._androidFingerPrint != other_storage._androidFingerPrint {return false}
        if _storage._userAgent != other_storage._userAgent {return false}
        if _storage._linkPlayStore != other_storage._linkPlayStore {return false}
        if _storage._typeCategory != other_storage._typeCategory {return false}
        if _storage._imei != other_storage._imei {return false}
        if _storage._softwareVersion != other_storage._softwareVersion {return false}
        if _storage._languageApp != other_storage._languageApp {return false}
        if _storage._userID != other_storage._userID {return false}
        if _storage._acc != other_storage._acc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
